using System.Security.Cryptography; // this namespace contains classes for cryptography
using System.Text;

RSAParameters rsaParameter;
byte[] encryptedSymmetricKey;
byte[] encryptedSymmetricIV;

Console.WriteLine("Show Symm Enc -----------");
ShowSymmEncryption();
Console.WriteLine("Show Symm Dec -----------");
ShowSymmDecryption();
Console.WriteLine("Show Asymm Enc -----------");
ShowAsymmEncryption();
Console.WriteLine("Show Asymm Dec -----------");
ShowAsymmDecryption();

void ShowAsymmDecryption()
{
    RSA rsa = RSA.Create();
    rsa.ImportParameters(rsaParameter);

    Aes aes = Aes.Create();
    aes.Key = rsa.Decrypt(encryptedSymmetricKey, RSAEncryptionPadding.Pkcs1);
    aes.IV = rsa.Decrypt(encryptedSymmetricIV, RSAEncryptionPadding.Pkcs1);
    Console.WriteLine(Convert.ToBase64String(aes.Key));
    
}

void ShowSymmDecryption()
{
    using (Aes aes = Aes.Create())
    {
        byte[] key =
                {
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16
            };
        aes.Key = key;

        var fileStream = File.OpenRead("TestData.txt");
        byte[] iv= new byte[16];//prepare 16bytes buffer
        fileStream.Read(iv, 0, 16);//read the first 16 bytes of IV into buffer
        aes.IV= iv;//assign IV of aes
        using (CryptoStream cryptoStream = new( 
               fileStream,
               aes.CreateDecryptor(),
               CryptoStreamMode.Read))
        {
            using (StreamReader encryptReader = new(cryptoStream)) 
            {
                Console.WriteLine(encryptReader.ReadToEnd());
            }
        }
    }

}

void ShowAsymmEncryption()
{


    //Create values to store encrypted symmetric keys.


    //Create a new instance of the RSA class.
    RSA rsa = RSA.Create();

    //Create a new instance of the RSAParameters structure.
    //RSAParameters rsaKeyInfo = new RSAParameters();

    //Set rsaKeyInfo to the public key values.
    //rsaKeyInfo.Modulus = modulus;
    //rsaKeyInfo.Exponent = exponent;

    //Import key parameters into rsa.
    //rsa.ImportParameters(rsaKeyInfo);

    //Create a new instance of the default Aes implementation class.
    Aes aes = Aes.Create();
    
    //Encrypt the symmetric key and IV.
    encryptedSymmetricKey = rsa.Encrypt(aes.Key, RSAEncryptionPadding.Pkcs1);
    encryptedSymmetricIV = rsa.Encrypt(aes.IV, RSAEncryptionPadding.Pkcs1);
    rsaParameter = rsa.ExportParameters(true);
    Console.WriteLine(Convert.ToBase64String(aes.Key));
}

void ShowSymmEncryption()
{

    using (FileStream fileStream = new("TestData.txt", FileMode.OpenOrCreate))
    {
        using (Aes aes = Aes.Create())
        {
            byte[] key =
            {
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16
            };
            aes.Key = key; //hardcode the symmetric key so we can decrypt using the same key

            byte[] iv = aes.IV; //read the autogenerated IV(initialization vector) an AES instance must have key and IV to encrypt/decrypt
            fileStream.Write(iv, 0, iv.Length); //write the IV(16 bytes long) to the beginning of the output file
            
            using (CryptoStream cryptoStream = new( //a new crypto stream wrapped around file stream for writing into the file
                fileStream,
                aes.CreateEncryptor(),
                CryptoStreamMode.Write))
            {
                using (StreamWriter encryptWriter = new(cryptoStream)) //create a StreamWriter(used for writing string/text data)
                {
                    encryptWriter.WriteLine("Hello World!");//write to the crypto
                }
            }
        }
    }
    Console.WriteLine("TestData.txt encrypted");
    string encString = Convert.ToBase64String(File.ReadAllBytes("TestData.txt"));
    Console.WriteLine(encString);


}